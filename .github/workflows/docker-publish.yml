name: "[MAIN] Docker Image Build and Publish"

on:
  push:
    branches: ["main"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: Deploy to GitHub Container Registry
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.1.1
      - name: Check install!
        run: cosign version

      - name: Login to GitHub Container Registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: downcase REPO
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and Push Docker Image
        run: |
          export CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          export TAG=$([[ $CURRENT_BRANCH == "main" ]] && echo $CURRENT_BRANCH || echo "latest")
          export GITHUB_REF_IMAGE=${{ env.REGISTRY }}/$REPO:$GITHUB_SHA
          export GITHUB_BRANCH_IMAGE=${{ env.REGISTRY }}/$REPO:$TAG
          docker build -t $GITHUB_REF_IMAGE -t $GITHUB_BRANCH_IMAGE .
          echo "Pushing Image to GitHub Container Registry"
          docker push $GITHUB_REF_IMAGE
          docker push $GITHUB_BRANCH_IMAGE
      # - name: Deploy on US server
      #   if: github.ref == 'refs/heads/prod'
      #   uses: appleboy/ssh-action@v0.1.7
      #   with:
      #     host: ${{ secrets.DEV_REMOTE_SERVER_ADDRESS_US01 }}
      #     username: ${{ secrets.DEV_SERVER_USERNAME }}
      #     key: ${{ secrets.DEV_REMOTE_SERVER_KEY }}
      #     port: ${{ secrets.DEV_SSH_PORT }}
      #     script: |
      #       pwd
      #       cd erebrus
      #       docker stop erebrus && docker rm erebrus && docker image rm ghcr.io/netsepio/erebrus:main
      #       echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
      #       docker pull ghcr.io/netsepio/erebrus:main
      #       docker run -d -p 9080:9080/tcp -p 51820:51820/udp --cap-add=NET_ADMIN --cap-add=SYS_MODULE --sysctl="net.ipv4.conf.all.src_valid_mark=1" --sysctl="net.ipv6.conf.all.forwarding=1" --restart unless-stopped -v /home/ubuntu/erebrus/wireguard/:/etc/wireguard/ --name erebrus --env-file .env ghcr.io/netsepio/erebrus:main
      # - name: Deploy on EU server
      #   if: github.ref == 'refs/heads/prod'
      #   uses: appleboy/ssh-action@v0.1.7
      #   with:
      #     host: ${{ secrets.DEV_REMOTE_SERVER_ADDRESS_EU01 }}
      #     username: ${{ secrets.DEV_SERVER_USERNAME }}
      #     key: ${{ secrets.DEV_REMOTE_SERVER_KEY }}
      #     port: ${{ secrets.DEV_SSH_PORT }}
      #     script: |
      #       pwd
      #       cd erebrus
      #       docker stop erebrus && docker rm erebrus && docker image rm ghcr.io/netsepio/erebrus:main
      #       echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
      #       docker pull ghcr.io/netsepio/erebrus:main
      #       docker run -d -p 9080:9080/tcp -p 51820:51820/udp --cap-add=NET_ADMIN --cap-add=SYS_MODULE --sysctl="net.ipv4.conf.all.src_valid_mark=1" --sysctl="net.ipv6.conf.all.forwarding=1" --restart unless-stopped -v /home/ubuntu/erebrus/wireguard/:/etc/wireguard/ --name erebrus --env-file .env ghcr.io/netsepio/erebrus:main
      # - name: Deploy on CA server
      #   if: github.ref == 'refs/heads/prod'
      #   uses: appleboy/ssh-action@v0.1.7
      #   with:
      #     host: ${{ secrets.DEV_REMOTE_SERVER_ADDRESS_CA01 }}
      #     username: ${{ secrets.DEV_SERVER_USERNAME }}
      #     key: ${{ secrets.DEV_REMOTE_SERVER_KEY }}
      #     port: ${{ secrets.DEV_SSH_PORT }}
      #     script: |
      #       pwd
      #       cd erebrus
      #       docker stop erebrus && docker rm erebrus && docker image rm ghcr.io/netsepio/erebrus:main
      #       echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
      #       docker pull ghcr.io/netsepio/erebrus:main
      #       docker run -d -p 9080:9080/tcp -p 51820:51820/udp --cap-add=NET_ADMIN --cap-add=SYS_MODULE --sysctl="net.ipv4.conf.all.src_valid_mark=1" --sysctl="net.ipv6.conf.all.forwarding=1" --restart unless-stopped -v /home/ubuntu/erebrus/wireguard/:/etc/wireguard/ --name erebrus --env-file .env ghcr.io/netsepio/erebrus:main
      # - name: Deploy on SG server
      #   if: github.ref == 'refs/heads/prod'
      #   uses: appleboy/ssh-action@v0.1.7
      #   with:
      #     host: ${{ secrets.DEV_REMOTE_SERVER_ADDRESS_SG01 }}
      #     username: ${{ secrets.DEV_SERVER_USERNAME }}
      #     key: ${{ secrets.DEV_REMOTE_SERVER_KEY }}
      #     port: ${{ secrets.DEV_SSH_PORT }}
      #     script: |
      #       pwd
      #       cd erebrus
      #       docker stop erebrus && docker rm erebrus && docker image rm ghcr.io/netsepio/erebrus:main
      #       echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
      #       docker pull ghcr.io/netsepio/erebrus:main
      #       docker run -d -p 9080:9080/tcp -p 9002:9002/tcp -p 51820:51820/udp --cap-add=NET_ADMIN --cap-add=SYS_MODULE --sysctl="net.ipv4.conf.all.src_valid_mark=1" --sysctl="net.ipv6.conf.all.forwarding=1" --restart unless-stopped -v /home/ubuntu/erebrus/wireguard/:/etc/wireguard/ --name erebrus --env-file .env ghcr.io/netsepio/erebrus:main